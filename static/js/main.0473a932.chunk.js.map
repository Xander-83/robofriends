{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","robots.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","this","filterRobots","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCCSC,EAjBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrB,OAEI,yBAAKC,UAAU,sDACX,2CACA,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACzB,6BACA,4BAAKC,GACG,2BAAG,4BAAKC,OCYTI,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAO,kBAAC,EAAD,CACHC,IAAKD,EACLV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCb5BK,EAAS,CAAC,CACnBP,GAAI,EACJC,KAAM,oBACNW,SAAU,aACVV,MAAO,8BAEX,CACIF,GAAI,EACJC,KAAM,gBACNW,SAAU,UACVV,MAAO,uBAEX,CACIF,GAAI,EACJC,KAAM,aACNW,SAAU,aACVV,MAAO,uBAEX,CACIF,GAAI,EACJC,KAAM,YACNW,SAAU,QACVV,MAAO,gCAEX,CACIF,GAAI,EACJC,KAAM,gBACNW,SAAU,YACVV,MAAO,mBAEX,CACIF,GAAI,EACJC,KAAM,YACNW,SAAU,UACVV,MAAO,mBAEX,CACIF,GAAI,EACJC,KAAM,aACNW,SAAU,aACVV,MAAO,sBCzBIW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKZ,UAAU,UACf,2BACAA,UAAU,mCACVa,KAAK,SACLC,YAAY,eACZC,SAAUH,MCEHI,G,MATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,YC0CJC,E,kDAvCX,aAAe,IAAD,8BACV,gBAMRC,eAAiB,SAACC,GAClB,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SANjC,EAAKC,MAAQ,CACTzB,OAAQ,GACRO,YAAa,IAJP,E,gEAYdmB,KAAKJ,SAAS,CAACtB,OAAQA,M,+BAQjB,IAAD,EAC2B0B,KAAKD,MAA7BzB,EADH,EACGA,OAAQO,EADX,EACWA,YACVoB,EAAe3B,EAAO4B,QAAO,SAAA5B,GAC/B,OAAOA,EAAON,KAAKmC,cAAcC,SAASvB,EAAYsB,kBAG1D,OACI,yBAAKjC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAckB,KAAKN,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUpB,OAAQ2B,U,GAhCZI,aCIlBC,IAASC,OAAQ,kBAAC,EAAD,MAAQC,SAASC,eAAe,SPwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0473a932.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        \r\n        <div className='tc bg-light-blue dib pa3 ma2 grow br3 bw2 shadow-5'>\r\n            <h2>RoboFriends</h2>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n        <div>\r\n        <h2>{name}</h2>\r\n                <p><h5>{email}</h5></p>\r\n</div>\r\n</div>\r\n\r\n    );\r\n   \r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../components/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return <Card\r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","export const robots = [{\r\n    id: 1,\r\n    name: 'Wishmaster Akunin',\r\n    username: 'Wishmaster',\r\n    email: 'wishmasterakunin@gmail.com'\r\n},\r\n{\r\n    id: 2,\r\n    name: 'Mashire Kyofu',\r\n    username: 'Mashire',\r\n    email: 'mashire11@gmail.com'\r\n},\r\n{\r\n    id: 3,\r\n    name: 'Ekz Dragon',\r\n    username: 'Wishmaster',\r\n    email: 'dragonekz@gmail.com'\r\n},\r\n{\r\n    id: 4,\r\n    name: 'Juvia TBD',\r\n    username: 'Juvia',\r\n    email: 'alexisjuviamorales@gmail.com'\r\n},\r\n{\r\n    id: 5,\r\n    name: 'Isaac Saldana',\r\n    username: 'KrimsnCat',\r\n    email: 'email@gmail.com'\r\n},\r\n{\r\n    id: 6,\r\n    name: 'Mia Spell',\r\n    username: 'Mitsuki',\r\n    email: 'email@gmail.com'\r\n},\r\n{\r\n    id: 7,\r\n    name: 'Emma Spell',\r\n    username: 'Emma Spell',\r\n    email: 'noemail@gmail.com'\r\n},\r\n]","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2 tc'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='Search Robot' \r\n        onChange={searchChange} />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SearchBox; ","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport { robots } from '../robots'; // Export that aren't default incase has another variable needs to be constructed // Not needed forExternal database \r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\nonSearchChange = (event) => {\r\nthis.setState({searchfield: event.target.value})\r\n}\r\n\r\ncomponentDidMount() {\r\n    this.setState({robots: robots}); // Remove this if want external database url\r\n}\r\n    /*   Below is to add a external database of users\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({robots: users}));\r\n}*/\r\n\r\nrender() {\r\n    const { robots, searchfield } = this.state;\r\n    const filterRobots = robots.filter(robots => {\r\n        return robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n\r\n    return (\r\n        <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n            <CardList robots={filterRobots} />\r\n            </Scroll>\r\n        </div>\r\n    );\r\n}\r\n\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card'; // It's export by Default\n// import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\n\n\nReactDOM.render (<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}